/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package profile.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import profile.model.DocumentsProfile;
import profile.model.DocumentsProfileModel;
import profile.model.DocumentsProfileSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DocumentsProfile service. Represents a row in the &quot;DocumentsProfile_DocumentsProfile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DocumentsProfileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocumentsProfileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DocumentsProfileImpl
 * @see DocumentsProfile
 * @see DocumentsProfileModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DocumentsProfileModelImpl extends BaseModelImpl<DocumentsProfile>
	implements DocumentsProfileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a documents profile model instance should use the {@link DocumentsProfile} interface instead.
	 */
	public static final String TABLE_NAME = "DocumentsProfile_DocumentsProfile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "userId", Types.VARCHAR },
			{ "anversoId", Types.VARCHAR },
			{ "reversoId", Types.VARCHAR },
			{ "selfie", Types.VARCHAR },
			{ "proofAddress", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("anversoId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reversoId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("selfie", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proofAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table DocumentsProfile_DocumentsProfile (uuid_ VARCHAR(75) null,userId VARCHAR(75) not null primary key,anversoId VARCHAR(75) null,reversoId VARCHAR(75) null,selfie VARCHAR(75) null,proofAddress VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DocumentsProfile_DocumentsProfile";
	public static final String ORDER_BY_JPQL = " ORDER BY documentsProfile.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DocumentsProfile_DocumentsProfile.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(profile.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.profile.model.DocumentsProfile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(profile.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.profile.model.DocumentsProfile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(profile.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.profile.model.DocumentsProfile"),
			true);
	public static final long USERID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DocumentsProfile toModel(DocumentsProfileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DocumentsProfile model = new DocumentsProfileImpl();

		model.setUuid(soapModel.getUuid());
		model.setUserId(soapModel.getUserId());
		model.setAnversoId(soapModel.getAnversoId());
		model.setReversoId(soapModel.getReversoId());
		model.setSelfie(soapModel.getSelfie());
		model.setProofAddress(soapModel.getProofAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DocumentsProfile> toModels(
		DocumentsProfileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DocumentsProfile> models = new ArrayList<DocumentsProfile>(soapModels.length);

		for (DocumentsProfileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(profile.service.util.ServiceProps.get(
				"lock.expiration.time.profile.model.DocumentsProfile"));

	public DocumentsProfileModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DocumentsProfile.class;
	}

	@Override
	public String getModelClassName() {
		return DocumentsProfile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("userId", getUserId());
		attributes.put("anversoId", getAnversoId());
		attributes.put("reversoId", getReversoId());
		attributes.put("selfie", getSelfie());
		attributes.put("proofAddress", getProofAddress());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String userId = (String)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String anversoId = (String)attributes.get("anversoId");

		if (anversoId != null) {
			setAnversoId(anversoId);
		}

		String reversoId = (String)attributes.get("reversoId");

		if (reversoId != null) {
			setReversoId(reversoId);
		}

		String selfie = (String)attributes.get("selfie");

		if (selfie != null) {
			setSelfie(selfie);
		}

		String proofAddress = (String)attributes.get("proofAddress");

		if (proofAddress != null) {
			setProofAddress(proofAddress);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getUserId() {
		if (_userId == null) {
			return StringPool.BLANK;
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (_originalUserId == null) {
			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getOriginalUserId() {
		return GetterUtil.getString(_originalUserId);
	}

	@JSON
	@Override
	public String getAnversoId() {
		if (_anversoId == null) {
			return StringPool.BLANK;
		}
		else {
			return _anversoId;
		}
	}

	@Override
	public void setAnversoId(String anversoId) {
		_anversoId = anversoId;
	}

	@JSON
	@Override
	public String getReversoId() {
		if (_reversoId == null) {
			return StringPool.BLANK;
		}
		else {
			return _reversoId;
		}
	}

	@Override
	public void setReversoId(String reversoId) {
		_reversoId = reversoId;
	}

	@JSON
	@Override
	public String getSelfie() {
		if (_selfie == null) {
			return StringPool.BLANK;
		}
		else {
			return _selfie;
		}
	}

	@Override
	public void setSelfie(String selfie) {
		_selfie = selfie;
	}

	@JSON
	@Override
	public String getProofAddress() {
		if (_proofAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _proofAddress;
		}
	}

	@Override
	public void setProofAddress(String proofAddress) {
		_proofAddress = proofAddress;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DocumentsProfile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DocumentsProfile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocumentsProfileImpl documentsProfileImpl = new DocumentsProfileImpl();

		documentsProfileImpl.setUuid(getUuid());
		documentsProfileImpl.setUserId(getUserId());
		documentsProfileImpl.setAnversoId(getAnversoId());
		documentsProfileImpl.setReversoId(getReversoId());
		documentsProfileImpl.setSelfie(getSelfie());
		documentsProfileImpl.setProofAddress(getProofAddress());

		documentsProfileImpl.resetOriginalValues();

		return documentsProfileImpl;
	}

	@Override
	public int compareTo(DocumentsProfile documentsProfile) {
		String primaryKey = documentsProfile.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DocumentsProfile)) {
			return false;
		}

		DocumentsProfile documentsProfile = (DocumentsProfile)obj;

		String primaryKey = documentsProfile.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DocumentsProfileModelImpl documentsProfileModelImpl = this;

		documentsProfileModelImpl._originalUuid = documentsProfileModelImpl._uuid;

		documentsProfileModelImpl._originalUserId = documentsProfileModelImpl._userId;

		documentsProfileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DocumentsProfile> toCacheModel() {
		DocumentsProfileCacheModel documentsProfileCacheModel = new DocumentsProfileCacheModel();

		documentsProfileCacheModel.uuid = getUuid();

		String uuid = documentsProfileCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			documentsProfileCacheModel.uuid = null;
		}

		documentsProfileCacheModel.userId = getUserId();

		String userId = documentsProfileCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			documentsProfileCacheModel.userId = null;
		}

		documentsProfileCacheModel.anversoId = getAnversoId();

		String anversoId = documentsProfileCacheModel.anversoId;

		if ((anversoId != null) && (anversoId.length() == 0)) {
			documentsProfileCacheModel.anversoId = null;
		}

		documentsProfileCacheModel.reversoId = getReversoId();

		String reversoId = documentsProfileCacheModel.reversoId;

		if ((reversoId != null) && (reversoId.length() == 0)) {
			documentsProfileCacheModel.reversoId = null;
		}

		documentsProfileCacheModel.selfie = getSelfie();

		String selfie = documentsProfileCacheModel.selfie;

		if ((selfie != null) && (selfie.length() == 0)) {
			documentsProfileCacheModel.selfie = null;
		}

		documentsProfileCacheModel.proofAddress = getProofAddress();

		String proofAddress = documentsProfileCacheModel.proofAddress;

		if ((proofAddress != null) && (proofAddress.length() == 0)) {
			documentsProfileCacheModel.proofAddress = null;
		}

		return documentsProfileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", anversoId=");
		sb.append(getAnversoId());
		sb.append(", reversoId=");
		sb.append(getReversoId());
		sb.append(", selfie=");
		sb.append(getSelfie());
		sb.append(", proofAddress=");
		sb.append(getProofAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("profile.model.DocumentsProfile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anversoId</column-name><column-value><![CDATA[");
		sb.append(getAnversoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reversoId</column-name><column-value><![CDATA[");
		sb.append(getReversoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>selfie</column-name><column-value><![CDATA[");
		sb.append(getSelfie());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proofAddress</column-name><column-value><![CDATA[");
		sb.append(getProofAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DocumentsProfile.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DocumentsProfile.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _userId;
	private String _originalUserId;
	private String _anversoId;
	private String _reversoId;
	private String _selfie;
	private String _proofAddress;
	private long _columnBitmask;
	private DocumentsProfile _escapedModel;
}