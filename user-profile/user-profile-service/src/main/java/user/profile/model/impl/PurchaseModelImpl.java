/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package user.profile.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import user.profile.model.Purchase;
import user.profile.model.PurchaseModel;
import user.profile.model.PurchaseSoap;

import user.profile.service.persistence.PurchasePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Purchase service. Represents a row in the &quot;UserProfile_Purchase&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PurchaseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PurchaseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PurchaseImpl
 * @see Purchase
 * @see PurchaseModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PurchaseModelImpl extends BaseModelImpl<Purchase>
	implements PurchaseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a purchase model instance should use the {@link Purchase} interface instead.
	 */
	public static final String TABLE_NAME = "UserProfile_Purchase";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "screenname", Types.VARCHAR },
			{ "hash", Types.VARCHAR },
			{ "date_time", Types.TIMESTAMP },
			{ "curr_from", Types.VARCHAR },
			{ "value_from", Types.VARCHAR },
			{ "curr_to", Types.VARCHAR },
			{ "value_to", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "ewallet", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("screenname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hash", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_time", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("curr_from", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value_from", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("curr_to", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value_to", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ewallet", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table UserProfile_Purchase (uuid_ VARCHAR(75) null,screenname VARCHAR(75) not null,hash VARCHAR(75) not null,date_time DATE null,curr_from VARCHAR(75) null,value_from VARCHAR(75) null,curr_to VARCHAR(75) null,value_to VARCHAR(75) null,status VARCHAR(75) null,ewallet VARCHAR(75) null,primary key (screenname, hash))";
	public static final String TABLE_SQL_DROP = "drop table UserProfile_Purchase";
	public static final String ORDER_BY_JPQL = " ORDER BY purchase.id.screenname ASC, purchase.id.hash ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UserProfile_Purchase.screenname ASC, UserProfile_Purchase.hash ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(user.profile.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.user.profile.model.Purchase"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(user.profile.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.user.profile.model.Purchase"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(user.profile.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.user.profile.model.Purchase"),
			true);
	public static final long SCREENNAME_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long HASH_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Purchase toModel(PurchaseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Purchase model = new PurchaseImpl();

		model.setUuid(soapModel.getUuid());
		model.setScreenname(soapModel.getScreenname());
		model.setHash(soapModel.getHash());
		model.setDate_time(soapModel.getDate_time());
		model.setCurr_from(soapModel.getCurr_from());
		model.setValue_from(soapModel.getValue_from());
		model.setCurr_to(soapModel.getCurr_to());
		model.setValue_to(soapModel.getValue_to());
		model.setStatus(soapModel.getStatus());
		model.setEwallet(soapModel.getEwallet());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Purchase> toModels(PurchaseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Purchase> models = new ArrayList<Purchase>(soapModels.length);

		for (PurchaseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(user.profile.service.util.ServiceProps.get(
				"lock.expiration.time.user.profile.model.Purchase"));

	public PurchaseModelImpl() {
	}

	@Override
	public PurchasePK getPrimaryKey() {
		return new PurchasePK(_screenname, _hash);
	}

	@Override
	public void setPrimaryKey(PurchasePK primaryKey) {
		setScreenname(primaryKey.screenname);
		setHash(primaryKey.hash);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new PurchasePK(_screenname, _hash);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((PurchasePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Purchase.class;
	}

	@Override
	public String getModelClassName() {
		return Purchase.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("screenname", getScreenname());
		attributes.put("hash", getHash());
		attributes.put("date_time", getDate_time());
		attributes.put("curr_from", getCurr_from());
		attributes.put("value_from", getValue_from());
		attributes.put("curr_to", getCurr_to());
		attributes.put("value_to", getValue_to());
		attributes.put("status", getStatus());
		attributes.put("ewallet", getEwallet());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String screenname = (String)attributes.get("screenname");

		if (screenname != null) {
			setScreenname(screenname);
		}

		String hash = (String)attributes.get("hash");

		if (hash != null) {
			setHash(hash);
		}

		Date date_time = (Date)attributes.get("date_time");

		if (date_time != null) {
			setDate_time(date_time);
		}

		String curr_from = (String)attributes.get("curr_from");

		if (curr_from != null) {
			setCurr_from(curr_from);
		}

		String value_from = (String)attributes.get("value_from");

		if (value_from != null) {
			setValue_from(value_from);
		}

		String curr_to = (String)attributes.get("curr_to");

		if (curr_to != null) {
			setCurr_to(curr_to);
		}

		String value_to = (String)attributes.get("value_to");

		if (value_to != null) {
			setValue_to(value_to);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String ewallet = (String)attributes.get("ewallet");

		if (ewallet != null) {
			setEwallet(ewallet);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getScreenname() {
		if (_screenname == null) {
			return StringPool.BLANK;
		}
		else {
			return _screenname;
		}
	}

	@Override
	public void setScreenname(String screenname) {
		_columnBitmask |= SCREENNAME_COLUMN_BITMASK;

		if (_originalScreenname == null) {
			_originalScreenname = _screenname;
		}

		_screenname = screenname;
	}

	public String getOriginalScreenname() {
		return GetterUtil.getString(_originalScreenname);
	}

	@JSON
	@Override
	public String getHash() {
		if (_hash == null) {
			return StringPool.BLANK;
		}
		else {
			return _hash;
		}
	}

	@Override
	public void setHash(String hash) {
		_hash = hash;
	}

	@JSON
	@Override
	public Date getDate_time() {
		return _date_time;
	}

	@Override
	public void setDate_time(Date date_time) {
		_date_time = date_time;
	}

	@JSON
	@Override
	public String getCurr_from() {
		if (_curr_from == null) {
			return StringPool.BLANK;
		}
		else {
			return _curr_from;
		}
	}

	@Override
	public void setCurr_from(String curr_from) {
		_curr_from = curr_from;
	}

	@JSON
	@Override
	public String getValue_from() {
		if (_value_from == null) {
			return StringPool.BLANK;
		}
		else {
			return _value_from;
		}
	}

	@Override
	public void setValue_from(String value_from) {
		_value_from = value_from;
	}

	@JSON
	@Override
	public String getCurr_to() {
		if (_curr_to == null) {
			return StringPool.BLANK;
		}
		else {
			return _curr_to;
		}
	}

	@Override
	public void setCurr_to(String curr_to) {
		_curr_to = curr_to;
	}

	@JSON
	@Override
	public String getValue_to() {
		if (_value_to == null) {
			return StringPool.BLANK;
		}
		else {
			return _value_to;
		}
	}

	@Override
	public void setValue_to(String value_to) {
		_value_to = value_to;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public String getEwallet() {
		if (_ewallet == null) {
			return StringPool.BLANK;
		}
		else {
			return _ewallet;
		}
	}

	@Override
	public void setEwallet(String ewallet) {
		_ewallet = ewallet;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Purchase toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Purchase)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PurchaseImpl purchaseImpl = new PurchaseImpl();

		purchaseImpl.setUuid(getUuid());
		purchaseImpl.setScreenname(getScreenname());
		purchaseImpl.setHash(getHash());
		purchaseImpl.setDate_time(getDate_time());
		purchaseImpl.setCurr_from(getCurr_from());
		purchaseImpl.setValue_from(getValue_from());
		purchaseImpl.setCurr_to(getCurr_to());
		purchaseImpl.setValue_to(getValue_to());
		purchaseImpl.setStatus(getStatus());
		purchaseImpl.setEwallet(getEwallet());

		purchaseImpl.resetOriginalValues();

		return purchaseImpl;
	}

	@Override
	public int compareTo(Purchase purchase) {
		PurchasePK primaryKey = purchase.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Purchase)) {
			return false;
		}

		Purchase purchase = (Purchase)obj;

		PurchasePK primaryKey = purchase.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PurchaseModelImpl purchaseModelImpl = this;

		purchaseModelImpl._originalUuid = purchaseModelImpl._uuid;

		purchaseModelImpl._originalScreenname = purchaseModelImpl._screenname;

		purchaseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Purchase> toCacheModel() {
		PurchaseCacheModel purchaseCacheModel = new PurchaseCacheModel();

		purchaseCacheModel.purchasePK = getPrimaryKey();

		purchaseCacheModel.uuid = getUuid();

		String uuid = purchaseCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			purchaseCacheModel.uuid = null;
		}

		purchaseCacheModel.screenname = getScreenname();

		String screenname = purchaseCacheModel.screenname;

		if ((screenname != null) && (screenname.length() == 0)) {
			purchaseCacheModel.screenname = null;
		}

		purchaseCacheModel.hash = getHash();

		String hash = purchaseCacheModel.hash;

		if ((hash != null) && (hash.length() == 0)) {
			purchaseCacheModel.hash = null;
		}

		Date date_time = getDate_time();

		if (date_time != null) {
			purchaseCacheModel.date_time = date_time.getTime();
		}
		else {
			purchaseCacheModel.date_time = Long.MIN_VALUE;
		}

		purchaseCacheModel.curr_from = getCurr_from();

		String curr_from = purchaseCacheModel.curr_from;

		if ((curr_from != null) && (curr_from.length() == 0)) {
			purchaseCacheModel.curr_from = null;
		}

		purchaseCacheModel.value_from = getValue_from();

		String value_from = purchaseCacheModel.value_from;

		if ((value_from != null) && (value_from.length() == 0)) {
			purchaseCacheModel.value_from = null;
		}

		purchaseCacheModel.curr_to = getCurr_to();

		String curr_to = purchaseCacheModel.curr_to;

		if ((curr_to != null) && (curr_to.length() == 0)) {
			purchaseCacheModel.curr_to = null;
		}

		purchaseCacheModel.value_to = getValue_to();

		String value_to = purchaseCacheModel.value_to;

		if ((value_to != null) && (value_to.length() == 0)) {
			purchaseCacheModel.value_to = null;
		}

		purchaseCacheModel.status = getStatus();

		String status = purchaseCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			purchaseCacheModel.status = null;
		}

		purchaseCacheModel.ewallet = getEwallet();

		String ewallet = purchaseCacheModel.ewallet;

		if ((ewallet != null) && (ewallet.length() == 0)) {
			purchaseCacheModel.ewallet = null;
		}

		return purchaseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", screenname=");
		sb.append(getScreenname());
		sb.append(", hash=");
		sb.append(getHash());
		sb.append(", date_time=");
		sb.append(getDate_time());
		sb.append(", curr_from=");
		sb.append(getCurr_from());
		sb.append(", value_from=");
		sb.append(getValue_from());
		sb.append(", curr_to=");
		sb.append(getCurr_to());
		sb.append(", value_to=");
		sb.append(getValue_to());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", ewallet=");
		sb.append(getEwallet());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("user.profile.model.Purchase");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screenname</column-name><column-value><![CDATA[");
		sb.append(getScreenname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hash</column-name><column-value><![CDATA[");
		sb.append(getHash());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_time</column-name><column-value><![CDATA[");
		sb.append(getDate_time());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>curr_from</column-name><column-value><![CDATA[");
		sb.append(getCurr_from());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value_from</column-name><column-value><![CDATA[");
		sb.append(getValue_from());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>curr_to</column-name><column-value><![CDATA[");
		sb.append(getCurr_to());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value_to</column-name><column-value><![CDATA[");
		sb.append(getValue_to());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ewallet</column-name><column-value><![CDATA[");
		sb.append(getEwallet());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Purchase.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Purchase.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _screenname;
	private String _originalScreenname;
	private String _hash;
	private Date _date_time;
	private String _curr_from;
	private String _value_from;
	private String _curr_to;
	private String _value_to;
	private String _status;
	private String _ewallet;
	private long _columnBitmask;
	private Purchase _escapedModel;
}