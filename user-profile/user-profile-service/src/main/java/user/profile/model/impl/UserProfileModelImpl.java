/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package user.profile.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import user.profile.model.UserProfile;
import user.profile.model.UserProfileModel;
import user.profile.model.UserProfileSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserProfile service. Represents a row in the &quot;UserProfile_UserProfile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserProfileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserProfileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserProfileImpl
 * @see UserProfile
 * @see UserProfileModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UserProfileModelImpl extends BaseModelImpl<UserProfile>
	implements UserProfileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user profile model instance should use the {@link UserProfile} interface instead.
	 */
	public static final String TABLE_NAME = "UserProfile_UserProfile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "userId", Types.VARCHAR },
			{ "anversoId", Types.VARCHAR },
			{ "reversoId", Types.VARCHAR },
			{ "selfie", Types.VARCHAR },
			{ "proofAddress", Types.VARCHAR },
			{ "idType", Types.VARCHAR },
			{ "idNumber", Types.VARCHAR },
			{ "country", Types.VARCHAR },
			{ "prov", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "street1", Types.VARCHAR },
			{ "street2", Types.VARCHAR },
			{ "homeNumber", Types.VARCHAR },
			{ "postalCode", Types.VARCHAR },
			{ "approved", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("anversoId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reversoId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("selfie", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("proofAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prov", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("street1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("street2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("homeNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postalCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approved", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table UserProfile_UserProfile (uuid_ VARCHAR(75) null,userId VARCHAR(75) not null primary key,anversoId VARCHAR(255) null,reversoId VARCHAR(255) null,selfie VARCHAR(255) null,proofAddress VARCHAR(255) null,idType VARCHAR(10) null,idNumber VARCHAR(20) null,country VARCHAR(25) null,prov VARCHAR(75) null,city VARCHAR(25) null,street1 VARCHAR(30) null,street2 VARCHAR(30) null,homeNumber VARCHAR(10) null,postalCode VARCHAR(10) null,approved BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table UserProfile_UserProfile";
	public static final String ORDER_BY_JPQL = " ORDER BY userProfile.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UserProfile_UserProfile.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(user.profile.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.user.profile.model.UserProfile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(user.profile.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.user.profile.model.UserProfile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(user.profile.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.user.profile.model.UserProfile"),
			true);
	public static final long USERID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserProfile toModel(UserProfileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserProfile model = new UserProfileImpl();

		model.setUuid(soapModel.getUuid());
		model.setUserId(soapModel.getUserId());
		model.setAnversoId(soapModel.getAnversoId());
		model.setReversoId(soapModel.getReversoId());
		model.setSelfie(soapModel.getSelfie());
		model.setProofAddress(soapModel.getProofAddress());
		model.setIdType(soapModel.getIdType());
		model.setIdNumber(soapModel.getIdNumber());
		model.setCountry(soapModel.getCountry());
		model.setProv(soapModel.getProv());
		model.setCity(soapModel.getCity());
		model.setStreet1(soapModel.getStreet1());
		model.setStreet2(soapModel.getStreet2());
		model.setHomeNumber(soapModel.getHomeNumber());
		model.setPostalCode(soapModel.getPostalCode());
		model.setApproved(soapModel.getApproved());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserProfile> toModels(UserProfileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserProfile> models = new ArrayList<UserProfile>(soapModels.length);

		for (UserProfileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(user.profile.service.util.ServiceProps.get(
				"lock.expiration.time.user.profile.model.UserProfile"));

	public UserProfileModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserProfile.class;
	}

	@Override
	public String getModelClassName() {
		return UserProfile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("userId", getUserId());
		attributes.put("anversoId", getAnversoId());
		attributes.put("reversoId", getReversoId());
		attributes.put("selfie", getSelfie());
		attributes.put("proofAddress", getProofAddress());
		attributes.put("idType", getIdType());
		attributes.put("idNumber", getIdNumber());
		attributes.put("country", getCountry());
		attributes.put("prov", getProv());
		attributes.put("city", getCity());
		attributes.put("street1", getStreet1());
		attributes.put("street2", getStreet2());
		attributes.put("homeNumber", getHomeNumber());
		attributes.put("postalCode", getPostalCode());
		attributes.put("approved", getApproved());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String userId = (String)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String anversoId = (String)attributes.get("anversoId");

		if (anversoId != null) {
			setAnversoId(anversoId);
		}

		String reversoId = (String)attributes.get("reversoId");

		if (reversoId != null) {
			setReversoId(reversoId);
		}

		String selfie = (String)attributes.get("selfie");

		if (selfie != null) {
			setSelfie(selfie);
		}

		String proofAddress = (String)attributes.get("proofAddress");

		if (proofAddress != null) {
			setProofAddress(proofAddress);
		}

		String idType = (String)attributes.get("idType");

		if (idType != null) {
			setIdType(idType);
		}

		String idNumber = (String)attributes.get("idNumber");

		if (idNumber != null) {
			setIdNumber(idNumber);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String prov = (String)attributes.get("prov");

		if (prov != null) {
			setProv(prov);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String street1 = (String)attributes.get("street1");

		if (street1 != null) {
			setStreet1(street1);
		}

		String street2 = (String)attributes.get("street2");

		if (street2 != null) {
			setStreet2(street2);
		}

		String homeNumber = (String)attributes.get("homeNumber");

		if (homeNumber != null) {
			setHomeNumber(homeNumber);
		}

		String postalCode = (String)attributes.get("postalCode");

		if (postalCode != null) {
			setPostalCode(postalCode);
		}

		Boolean approved = (Boolean)attributes.get("approved");

		if (approved != null) {
			setApproved(approved);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getUserId() {
		if (_userId == null) {
			return StringPool.BLANK;
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (_originalUserId == null) {
			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getOriginalUserId() {
		return GetterUtil.getString(_originalUserId);
	}

	@JSON
	@Override
	public String getAnversoId() {
		if (_anversoId == null) {
			return StringPool.BLANK;
		}
		else {
			return _anversoId;
		}
	}

	@Override
	public void setAnversoId(String anversoId) {
		_anversoId = anversoId;
	}

	@JSON
	@Override
	public String getReversoId() {
		if (_reversoId == null) {
			return StringPool.BLANK;
		}
		else {
			return _reversoId;
		}
	}

	@Override
	public void setReversoId(String reversoId) {
		_reversoId = reversoId;
	}

	@JSON
	@Override
	public String getSelfie() {
		if (_selfie == null) {
			return StringPool.BLANK;
		}
		else {
			return _selfie;
		}
	}

	@Override
	public void setSelfie(String selfie) {
		_selfie = selfie;
	}

	@JSON
	@Override
	public String getProofAddress() {
		if (_proofAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _proofAddress;
		}
	}

	@Override
	public void setProofAddress(String proofAddress) {
		_proofAddress = proofAddress;
	}

	@JSON
	@Override
	public String getIdType() {
		if (_idType == null) {
			return StringPool.BLANK;
		}
		else {
			return _idType;
		}
	}

	@Override
	public void setIdType(String idType) {
		_idType = idType;
	}

	@JSON
	@Override
	public String getIdNumber() {
		if (_idNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _idNumber;
		}
	}

	@Override
	public void setIdNumber(String idNumber) {
		_idNumber = idNumber;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@JSON
	@Override
	public String getProv() {
		if (_prov == null) {
			return StringPool.BLANK;
		}
		else {
			return _prov;
		}
	}

	@Override
	public void setProv(String prov) {
		_prov = prov;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getStreet1() {
		if (_street1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _street1;
		}
	}

	@Override
	public void setStreet1(String street1) {
		_street1 = street1;
	}

	@JSON
	@Override
	public String getStreet2() {
		if (_street2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _street2;
		}
	}

	@Override
	public void setStreet2(String street2) {
		_street2 = street2;
	}

	@JSON
	@Override
	public String getHomeNumber() {
		if (_homeNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _homeNumber;
		}
	}

	@Override
	public void setHomeNumber(String homeNumber) {
		_homeNumber = homeNumber;
	}

	@JSON
	@Override
	public String getPostalCode() {
		if (_postalCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _postalCode;
		}
	}

	@Override
	public void setPostalCode(String postalCode) {
		_postalCode = postalCode;
	}

	@JSON
	@Override
	public Boolean getApproved() {
		return _approved;
	}

	@Override
	public void setApproved(Boolean approved) {
		_approved = approved;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UserProfile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserProfile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserProfileImpl userProfileImpl = new UserProfileImpl();

		userProfileImpl.setUuid(getUuid());
		userProfileImpl.setUserId(getUserId());
		userProfileImpl.setAnversoId(getAnversoId());
		userProfileImpl.setReversoId(getReversoId());
		userProfileImpl.setSelfie(getSelfie());
		userProfileImpl.setProofAddress(getProofAddress());
		userProfileImpl.setIdType(getIdType());
		userProfileImpl.setIdNumber(getIdNumber());
		userProfileImpl.setCountry(getCountry());
		userProfileImpl.setProv(getProv());
		userProfileImpl.setCity(getCity());
		userProfileImpl.setStreet1(getStreet1());
		userProfileImpl.setStreet2(getStreet2());
		userProfileImpl.setHomeNumber(getHomeNumber());
		userProfileImpl.setPostalCode(getPostalCode());
		userProfileImpl.setApproved(getApproved());

		userProfileImpl.resetOriginalValues();

		return userProfileImpl;
	}

	@Override
	public int compareTo(UserProfile userProfile) {
		String primaryKey = userProfile.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserProfile)) {
			return false;
		}

		UserProfile userProfile = (UserProfile)obj;

		String primaryKey = userProfile.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserProfileModelImpl userProfileModelImpl = this;

		userProfileModelImpl._originalUuid = userProfileModelImpl._uuid;

		userProfileModelImpl._originalUserId = userProfileModelImpl._userId;

		userProfileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserProfile> toCacheModel() {
		UserProfileCacheModel userProfileCacheModel = new UserProfileCacheModel();

		userProfileCacheModel.uuid = getUuid();

		String uuid = userProfileCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userProfileCacheModel.uuid = null;
		}

		userProfileCacheModel.userId = getUserId();

		String userId = userProfileCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			userProfileCacheModel.userId = null;
		}

		userProfileCacheModel.anversoId = getAnversoId();

		String anversoId = userProfileCacheModel.anversoId;

		if ((anversoId != null) && (anversoId.length() == 0)) {
			userProfileCacheModel.anversoId = null;
		}

		userProfileCacheModel.reversoId = getReversoId();

		String reversoId = userProfileCacheModel.reversoId;

		if ((reversoId != null) && (reversoId.length() == 0)) {
			userProfileCacheModel.reversoId = null;
		}

		userProfileCacheModel.selfie = getSelfie();

		String selfie = userProfileCacheModel.selfie;

		if ((selfie != null) && (selfie.length() == 0)) {
			userProfileCacheModel.selfie = null;
		}

		userProfileCacheModel.proofAddress = getProofAddress();

		String proofAddress = userProfileCacheModel.proofAddress;

		if ((proofAddress != null) && (proofAddress.length() == 0)) {
			userProfileCacheModel.proofAddress = null;
		}

		userProfileCacheModel.idType = getIdType();

		String idType = userProfileCacheModel.idType;

		if ((idType != null) && (idType.length() == 0)) {
			userProfileCacheModel.idType = null;
		}

		userProfileCacheModel.idNumber = getIdNumber();

		String idNumber = userProfileCacheModel.idNumber;

		if ((idNumber != null) && (idNumber.length() == 0)) {
			userProfileCacheModel.idNumber = null;
		}

		userProfileCacheModel.country = getCountry();

		String country = userProfileCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			userProfileCacheModel.country = null;
		}

		userProfileCacheModel.prov = getProv();

		String prov = userProfileCacheModel.prov;

		if ((prov != null) && (prov.length() == 0)) {
			userProfileCacheModel.prov = null;
		}

		userProfileCacheModel.city = getCity();

		String city = userProfileCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			userProfileCacheModel.city = null;
		}

		userProfileCacheModel.street1 = getStreet1();

		String street1 = userProfileCacheModel.street1;

		if ((street1 != null) && (street1.length() == 0)) {
			userProfileCacheModel.street1 = null;
		}

		userProfileCacheModel.street2 = getStreet2();

		String street2 = userProfileCacheModel.street2;

		if ((street2 != null) && (street2.length() == 0)) {
			userProfileCacheModel.street2 = null;
		}

		userProfileCacheModel.homeNumber = getHomeNumber();

		String homeNumber = userProfileCacheModel.homeNumber;

		if ((homeNumber != null) && (homeNumber.length() == 0)) {
			userProfileCacheModel.homeNumber = null;
		}

		userProfileCacheModel.postalCode = getPostalCode();

		String postalCode = userProfileCacheModel.postalCode;

		if ((postalCode != null) && (postalCode.length() == 0)) {
			userProfileCacheModel.postalCode = null;
		}

		userProfileCacheModel.approved = getApproved();

		return userProfileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", anversoId=");
		sb.append(getAnversoId());
		sb.append(", reversoId=");
		sb.append(getReversoId());
		sb.append(", selfie=");
		sb.append(getSelfie());
		sb.append(", proofAddress=");
		sb.append(getProofAddress());
		sb.append(", idType=");
		sb.append(getIdType());
		sb.append(", idNumber=");
		sb.append(getIdNumber());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", prov=");
		sb.append(getProv());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", street1=");
		sb.append(getStreet1());
		sb.append(", street2=");
		sb.append(getStreet2());
		sb.append(", homeNumber=");
		sb.append(getHomeNumber());
		sb.append(", postalCode=");
		sb.append(getPostalCode());
		sb.append(", approved=");
		sb.append(getApproved());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("user.profile.model.UserProfile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anversoId</column-name><column-value><![CDATA[");
		sb.append(getAnversoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reversoId</column-name><column-value><![CDATA[");
		sb.append(getReversoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>selfie</column-name><column-value><![CDATA[");
		sb.append(getSelfie());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proofAddress</column-name><column-value><![CDATA[");
		sb.append(getProofAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idType</column-name><column-value><![CDATA[");
		sb.append(getIdType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idNumber</column-name><column-value><![CDATA[");
		sb.append(getIdNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prov</column-name><column-value><![CDATA[");
		sb.append(getProv());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street1</column-name><column-value><![CDATA[");
		sb.append(getStreet1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street2</column-name><column-value><![CDATA[");
		sb.append(getStreet2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homeNumber</column-name><column-value><![CDATA[");
		sb.append(getHomeNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postalCode</column-name><column-value><![CDATA[");
		sb.append(getPostalCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approved</column-name><column-value><![CDATA[");
		sb.append(getApproved());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserProfile.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserProfile.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _userId;
	private String _originalUserId;
	private String _anversoId;
	private String _reversoId;
	private String _selfie;
	private String _proofAddress;
	private String _idType;
	private String _idNumber;
	private String _country;
	private String _prov;
	private String _city;
	private String _street1;
	private String _street2;
	private String _homeNumber;
	private String _postalCode;
	private Boolean _approved;
	private long _columnBitmask;
	private UserProfile _escapedModel;
}